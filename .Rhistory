scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
theme(axis.text.x=element_text(angle=90, vjust=0.5),
text=element_text(size=20),
# axis.title=element_text(size=32),
panel.spacing=unit(4, units='mm'),
strip.text=element_text(size=15),
legend.title=element_blank())
bhattacharyya_affs_sp %>%
mutate(corpus=factor(corpus, levels=merge_order_cols, labels=merge_order_names)) %>%
dplyr::select(context, bhatt_aff, speaker, corpus, dialect_broad) %>%
group_by(speaker, context) %>%
summarise(bhatt_aff = mean(bhatt_aff),
corpus = first(corpus),
dialect_broad = first(dialect_broad)) %>%
ungroup() %>%
pivot_wider(names_from="context", values_from="bhatt_aff")%>%
ggplot(aes(x=oral, y=nasal, color=dialect_broad)) +
geom_point(alpha=0.5, size=3) +
facet_wrap(~corpus) +
geom_abline(lty=3) +
coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1), expand=FALSE, clip='on') +
xlab("Preoral overlap (BA)") +
ylab("Prenasal overlap (BA)") +
theme_bw(base_size=16) +
scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
theme(axis.text.x=element_text(angle=90, vjust=0.5),
text=element_text(size=20),
# axis.title=element_text(size=32),
panel.spacing=unit(4, units='mm'),
strip.text=element_text(size=15),
legend.title=element_blank())
bhattacharyya_affs_sp %>%
mutate(corpus=factor(corpus, levels=merge_order_cols, labels=merge_order_names)) %>%
dplyr::select(context, bhatt_aff, speaker, corpus, dialect_broad) %>%
group_by(speaker, context) %>%
summarise(bhatt_aff = mean(bhatt_aff),
corpus = first(corpus),
dialect_broad = first(dialect_broad)) %>%
ungroup() %>%
pivot_wider(names_from="context", values_from="bhatt_aff")%>%
ggplot(aes(x=oral, y=nasal, color=dialect_broad)) +
geom_point(alpha=0.5, size=3, show.legend=FALSE) +
facet_wrap(~corpus) +
geom_abline(lty=3) +
coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1), expand=FALSE, clip='on') +
xlab("Preoral overlap (BA)") +
ylab("Prenasal overlap (BA)") +
theme_bw(base_size=16) +
scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
theme(axis.text.x=element_text(angle=90, vjust=0.5),
text=element_text(size=20),
# axis.title=element_text(size=32),
panel.spacing=unit(4, units='mm'),
strip.text=element_text(size=15),
legend.title=element_blank())
ggsave("../plots/labphon_dialect_plot.png", width=18, height=18, units="cm")
bhattacharyya_affs_sp %>%
mutate(corpus=factor(corpus, levels=merge_order_cols, labels=merge_order_names)) %>%
dplyr::select(context, bhatt_aff, speaker, corpus, dialect_broad) %>%
group_by(speaker, context) %>%
summarise(bhatt_aff = mean(bhatt_aff),
corpus = first(corpus),
dialect_broad = first(dialect_broad)) %>%
ungroup() %>%
pivot_wider(names_from="context", values_from="bhatt_aff")%>%
ggplot(aes(x=oral, y=nasal, color=dialect_broad)) +
geom_point(alpha=0.5, size=3, show.legend=FALSE) +
facet_wrap(~corpus) +
geom_abline(lty=3) +
coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1), expand=FALSE, clip='on') +
xlab("Preoral overlap (BA)") +
ylab("Prenasal overlap (BA)") +
theme_bw(base_size=10) +
scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
theme(axis.text.x=element_text(angle=90, vjust=0.5),
text=element_text(size=20),
# axis.title=element_text(size=32),
panel.spacing=unit(4, units='mm'),
strip.text=element_text(size=15),
legend.title=element_blank())
bhattacharyya_affs_sp %>%
mutate(corpus=factor(corpus, levels=merge_order_cols, labels=merge_order_names)) %>%
dplyr::select(context, bhatt_aff, speaker, corpus, dialect_broad) %>%
group_by(speaker, context) %>%
summarise(bhatt_aff = mean(bhatt_aff),
corpus = first(corpus),
dialect_broad = first(dialect_broad)) %>%
ungroup() %>%
pivot_wider(names_from="context", values_from="bhatt_aff")%>%
ggplot(aes(x=oral, y=nasal, color=dialect_broad)) +
geom_point(alpha=0.5, size=3, show.legend=FALSE) +
facet_wrap(~corpus) +
geom_abline(lty=3) +
coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1), expand=FALSE, clip='on') +
xlab("Preoral overlap (BA)") +
ylab("Prenasal overlap (BA)") +
theme_bw(base_size=10) +
scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
theme(axis.text.x=element_text(angle=90, vjust=0.5),
text=element_text(size=20),
# axis.title=element_text(size=32),
panel.spacing=unit(4, units='mm'),
strip.text=element_text(size=15),
legend.title=element_blank())
ggsave("../plots/labphon_dialect_plot.png", width=18, height=18, units="cm")
bhattacharyya_affs_sp %>%
mutate(corpus=factor(corpus, levels=merge_order_cols, labels=merge_order_names)) %>%
dplyr::select(context, bhatt_aff, speaker, corpus, dialect_broad) %>%
group_by(speaker, context) %>%
summarise(bhatt_aff = mean(bhatt_aff),
corpus = first(corpus),
dialect_broad = first(dialect_broad)) %>%
ungroup() %>%
pivot_wider(names_from="context", values_from="bhatt_aff")%>%
ggplot(aes(x=oral, y=nasal, color=dialect_broad)) +
geom_point(alpha=0.5, size=3, show.legend=FALSE) +
facet_wrap(~corpus) +
geom_abline(lty=3) +
coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1), expand=FALSE, clip='on') +
xlab("Preoral overlap (BA)") +
ylab("Prenasal overlap (BA)") +
theme_bw(base_size=10) +
scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
theme(axis.text.x=element_text(angle=90, vjust=0.5),
text=element_text(size=20),
# axis.title=element_text(size=32),
panel.spacing=unit(4, units='mm'),
strip.text=element_text(size=10),
legend.title=element_blank())
bhattacharyya_affs_sp %>%
mutate(corpus=factor(corpus, levels=merge_order_cols, labels=merge_order_names)) %>%
dplyr::select(context, bhatt_aff, speaker, corpus, dialect_broad) %>%
group_by(speaker, context) %>%
summarise(bhatt_aff = mean(bhatt_aff),
corpus = first(corpus),
dialect_broad = first(dialect_broad)) %>%
ungroup() %>%
pivot_wider(names_from="context", values_from="bhatt_aff")%>%
ggplot(aes(x=oral, y=nasal, color=dialect_broad)) +
geom_point(alpha=0.5, size=3, show.legend=FALSE) +
facet_wrap(~corpus) +
geom_abline(lty=3) +
coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1), expand=FALSE, clip='on') +
xlab("Preoral overlap (BA)") +
ylab("Prenasal overlap (BA)") +
theme_bw(base_size=10) +
scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
theme(axis.text.x=element_text(angle=90, vjust=0.5),
# text=element_text(size=16),
# axis.title=element_text(size=32),
panel.spacing=unit(4, units='mm'),
strip.text=element_text(size=10),
legend.title=element_blank())
bhattacharyya_affs_sp %>%
mutate(corpus=factor(corpus, levels=merge_order_cols, labels=merge_order_names)) %>%
dplyr::select(context, bhatt_aff, speaker, corpus, dialect_broad) %>%
group_by(speaker, context) %>%
summarise(bhatt_aff = mean(bhatt_aff),
corpus = first(corpus),
dialect_broad = first(dialect_broad)) %>%
ungroup() %>%
pivot_wider(names_from="context", values_from="bhatt_aff")%>%
ggplot(aes(x=oral, y=nasal, color=dialect_broad)) +
geom_point(alpha=0.5, size=3, show.legend=FALSE) +
facet_wrap(~corpus) +
geom_abline(lty=3) +
coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1), expand=FALSE, clip='on') +
xlab("Preoral overlap (BA)") +
ylab("Prenasal overlap (BA)") +
theme_bw(base_size=10) +
scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
theme(axis.text.x=element_text(angle=90, vjust=0.5),
# text=element_text(size=16),
# axis.title=element_text(size=32),
panel.spacing=unit(4, units='mm'),
strip.text=element_text(size=10),
legend.title=element_blank())
ggsave("../plots/labphon_dialect_plot.png", width=18, height=18, units="cm")
# ggsave("../plots/asa_ba_dialect_plot.png", width=30, height=30, units="cm")
# ggsave("../plots/moth_dialect_plot.png", width=18, height=18, units="cm")
# ggExtra::ggMarginal(type='density')
# ggMarginal(pl, type="histogram")
# ggExtra::ggMarginal(pl, type = 'histogram')
# ggsave("../plots/expanded_scatter_bhatt.png", width=15, height=15)
bhattacharyya_affs_sp %>%
mutate(corpus=factor(corpus, levels=merge_order_cols, labels=merge_order_names)) %>%
dplyr::select(context, bhatt_aff, speaker, corpus, dialect_broad) %>%
group_by(speaker, context) %>%
summarise(bhatt_aff = mean(bhatt_aff),
corpus = first(corpus),
dialect_broad = first(dialect_broad)) %>%
ungroup() %>%
pivot_wider(names_from="context", values_from="bhatt_aff")%>%
ggplot(aes(x=oral, y=nasal, color=dialect_broad)) +
geom_point(alpha=0.5, size=3, show.legend=FALSE) +
facet_wrap(~corpus) +
geom_abline(lty=3) +
coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1), expand=FALSE, clip='on') +
xlab("Preoral overlap (BA)") +
ylab("Prenasal overlap (BA)") +
theme_bw(base_size=10) +
scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
theme(axis.text.x=element_text(angle=90, vjust=0.5),
# text=element_text(size=16),
# axis.title=element_text(size=32),
panel.spacing=unit(4, units='mm'),
# strip.text=element_text(size=10),
legend.title=element_blank())
bhattacharyya_affs_sp %>%
mutate(corpus=factor(corpus, levels=merge_order_cols, labels=merge_order_names)) %>%
dplyr::select(context, bhatt_aff, speaker, corpus, dialect_broad) %>%
group_by(speaker, context) %>%
summarise(bhatt_aff = mean(bhatt_aff),
corpus = first(corpus),
dialect_broad = first(dialect_broad)) %>%
ungroup() %>%
pivot_wider(names_from="context", values_from="bhatt_aff")%>%
ggplot(aes(x=oral, y=nasal, color=dialect_broad)) +
geom_point(alpha=0.5, size=3, show.legend=FALSE) +
facet_wrap(~corpus) +
geom_abline(lty=3) +
coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1), expand=FALSE, clip='on') +
xlab("Preoral overlap (BA)") +
ylab("Prenasal overlap (BA)") +
theme_bw(base_size=10) +
scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
theme(axis.text.x=element_text(angle=90, vjust=0.5),
# text=element_text(size=16),
# axis.title=element_text(size=32),
panel.spacing=unit(4, units='mm'),
# strip.text=element_text(size=10),
legend.title=element_blank())
ggsave("../plots/labphon_dialect_plot.png", width=18, height=18, units="cm")
bhattacharyya_affs_sp %>%
mutate(corpus=factor(corpus, levels=merge_order_cols, labels=merge_order_names)) %>%
dplyr::select(context, bhatt_aff, speaker, corpus, dialect_broad) %>%
group_by(speaker, context) %>%
summarise(bhatt_aff = mean(bhatt_aff),
corpus = first(corpus),
dialect_broad = first(dialect_broad)) %>%
ungroup() %>%
pivot_wider(names_from="context", values_from="bhatt_aff")%>%
ggplot(aes(x=oral, y=nasal, color=dialect_broad)) +
geom_point(alpha=0.5, size=1, show.legend=FALSE) +
facet_wrap(~corpus) +
geom_abline(lty=3) +
coord_fixed(ratio=1, xlim=c(0, 1), ylim=c(0, 1), expand=FALSE, clip='on') +
xlab("Preoral overlap (BA)") +
ylab("Prenasal overlap (BA)") +
theme_bw(base_size=10) +
scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
theme(axis.text.x=element_text(angle=90, vjust=0.5),
# text=element_text(size=16),
# axis.title=element_text(size=32),
panel.spacing=unit(4, units='mm'),
# strip.text=element_text(size=10),
legend.title=element_blank())
ggsave("../plots/labphon_dialect_plot.png", width=18, height=18, units="cm")
bhattacharyya_affs_summary_wide %>%
mutate(corpus=factor(corpus, levels=merge_order_cols, labels=merge_order_names)) %>%
ggplot(aes(x=bhatt_aff_oral, y=bhatt_aff_nasal, label=corpus, color=dialect_broad)) +
geom_linerange(lty=2, alpha=0.25,
aes(ymin=bhatt_aff_nasal.lower,
ymax=bhatt_aff_nasal.upper),
show.legend=FALSE) +
geom_linerange(lty=2, alpha=0.25,
aes(xmin=bhatt_aff_oral.lower,
xmax=bhatt_aff_oral.upper),
show.legend=FALSE) +
geom_point(size=3, alpha=0.5) +
scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
# stat_ellipse(alpha=0.1,
#              level=0.95,
#              data=bhattacharyya_affs_av %>%
#                pivot_wider(names_from=context, values_from=bhatt_aff),
#              aes(x=oral, y=nasal, group=corpus)) +
geom_text_repel(size=2, show.legend=FALSE) +
xlab("Preoral BA") + ylab("Prenasal BA") +
geom_abline(alpha=0.5, lty=3) +
coord_fixed(ratio=1, xlim=c(0.25, 1), ylim=c(0.25, 1), expand=FALSE, clip='on') +
theme_bw() +
theme(text=element_text(),
axis.text.x=element_text(angle=90, vjust=0.5),
axis.title=element_blank(),
legend.title=element_blank())
bhattacharyya_affs_summary_wide %>%
mutate(corpus=factor(corpus, levels=merge_order_cols, labels=merge_order_names)) %>%
ggplot(aes(x=bhatt_aff_oral, y=bhatt_aff_nasal, label=corpus, color=dialect_broad)) +
geom_linerange(lty=2, alpha=0.25,
aes(ymin=bhatt_aff_nasal.lower,
ymax=bhatt_aff_nasal.upper),
show.legend=FALSE) +
geom_linerange(lty=2, alpha=0.25,
aes(xmin=bhatt_aff_oral.lower,
xmax=bhatt_aff_oral.upper),
show.legend=FALSE) +
geom_point(size=3, alpha=0.5) +
scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
# stat_ellipse(alpha=0.1,
#              level=0.95,
#              data=bhattacharyya_affs_av %>%
#                pivot_wider(names_from=context, values_from=bhatt_aff),
#              aes(x=oral, y=nasal, group=corpus)) +
geom_text_repel(size=2, show.legend=FALSE) +
xlab("Preoral overlap (BA)") + ylab("Prenasal overlap (BA)") +
geom_abline(alpha=0.5, lty=3) +
coord_fixed(ratio=1, xlim=c(0.25, 1), ylim=c(0.25, 1), expand=FALSE, clip='on') +
theme_bw(base_size=16) +
theme(text=element_text(),
# axis.text.x=element_text(angle=90, vjust=0.5),
# axis.title=element_blank(),
legend.title=element_blank(),
plot.margin=margin(t=5, r=12, b=0, l=0, unit="pt"))
bhattacharyya_affs_summary_wide %>%
mutate(corpus=factor(corpus, levels=merge_order_cols, labels=merge_order_names)) %>%
ggplot(aes(x=bhatt_aff_oral, y=bhatt_aff_nasal, label=corpus, color=dialect_broad)) +
geom_linerange(lty=2, alpha=0.25,
aes(ymin=bhatt_aff_nasal.lower,
ymax=bhatt_aff_nasal.upper),
show.legend=FALSE) +
geom_linerange(lty=2, alpha=0.25,
aes(xmin=bhatt_aff_oral.lower,
xmax=bhatt_aff_oral.upper),
show.legend=FALSE) +
geom_point(size=3, alpha=0.5, show.legend=FALSE) +
scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
# stat_ellipse(alpha=0.1,
#              level=0.95,
#              data=bhattacharyya_affs_av %>%
#                pivot_wider(names_from=context, values_from=bhatt_aff),
#              aes(x=oral, y=nasal, group=corpus)) +
geom_text_repel(size=2, show.legend=FALSE) +
xlab("Preoral overlap (BA)") + ylab("Prenasal overlap (BA)") +
geom_abline(alpha=0.5, lty=3) +
coord_fixed(ratio=1, xlim=c(0.25, 1), ylim=c(0.25, 1), expand=FALSE, clip='on') +
theme_bw(base_size=16) +
theme(text=element_text(),
# axis.text.x=element_text(angle=90, vjust=0.5),
# axis.title=element_blank(),
legend.title=element_blank(),
plot.margin=margin(t=5, r=12, b=0, l=0, unit="pt"))
bhattacharyya_affs_summary_wide %>%
mutate(corpus=factor(corpus, levels=merge_order_cols, labels=merge_order_names)) %>%
ggplot(aes(x=bhatt_aff_oral, y=bhatt_aff_nasal, label=corpus, color=dialect_broad)) +
geom_linerange(lty=2, alpha=0.25,
aes(ymin=bhatt_aff_nasal.lower,
ymax=bhatt_aff_nasal.upper),
show.legend=FALSE) +
geom_linerange(lty=2, alpha=0.25,
aes(xmin=bhatt_aff_oral.lower,
xmax=bhatt_aff_oral.upper),
show.legend=FALSE) +
geom_point(size=3, alpha=0.5, show.legend=FALSE) +
scale_color_manual(values=c("#A2A475", "#D8B70A", "#972D15", "#02401B")) +
# stat_ellipse(alpha=0.1,
#              level=0.95,
#              data=bhattacharyya_affs_av %>%
#                pivot_wider(names_from=context, values_from=bhatt_aff),
#              aes(x=oral, y=nasal, group=corpus)) +
geom_text_repel(size=2, show.legend=FALSE) +
xlab("Preoral overlap (BA)") + ylab("Prenasal overlap (BA)") +
geom_abline(alpha=0.5, lty=3) +
coord_fixed(ratio=1, xlim=c(0.25, 1), ylim=c(0.25, 1), expand=FALSE, clip='on') +
theme_bw(base_size=16) +
theme(text=element_text(),
# axis.text.x=element_text(angle=90, vjust=0.5),
# axis.title=element_blank(),
legend.title=element_blank(),
plot.margin=margin(t=5, r=12, b=0, l=0, unit="pt"))
ggsave("../plots/labphon_by_corpus_labels.png", width=14.5, height=14, units='cm')
# ggsave("../plots/moth_by_corpus_labels.png", width=14, height=12, units='cm')
library(tidyverse)
library(palmerpenguins)
#| eval: false
renv::init()
renv::snapshot()
#| eval: false
renv::init()
renv::snapshot()
library(tidyverse)
library(palmerpenguins)
library(showtext)
library(khroma)
font_add_google("Atkinson Hyperlegible", "atkinson")
showtext_auto()
palmerpenguins::penguins %>%
ggplot(aes(flipper_length_mm, body_mass_g, color = species))+
geom_point()+
scale_color_bright()+
theme_minimal()+
theme(text = element_text(family = "atkinson"))
? add_epred_draws
??add_epred_draws
??
mean_qi
??
median_qi
library(tidybayes)
library(tidyverse)
raleigh_data_raw <- readOSF(https://osf.io/79jgu, read.csv)
raleigh_data_raw <- readOSF("https://osf.io/79jgu", read.csv)
?? readOSF
remotes::install_github("SachaEpskamp/OSF2R")
install.packages("remotes")
remotes::install_github("SachaEpskamp/OSF2R")
raleigh_data_raw <- readr("data/spade-Raleigh_formants_whitelisted.csv")
?? readr
raleigh_data_raw <- read.csv("data/spade-Raleigh_formants_whitelisted.csv")
View(raleigh_data_raw)
top_10_speakers <- raleigh_data_raw %>%
group_by(speaker) %>%
summarise(n=n)
top_10_speakers <- raleigh_data_raw %>%
group_by(speaker) %>%
summarise(n=n(speaker))
top_10_speakers <- raleigh_data_raw %>%
# group_by(speaker) %>%
summarise(n=n(speaker))
top_10_speakers <- raleigh_data_raw %>%
# group_by(speaker) %>%
summarise(n_tokens=count(speaker))
top_10_speakers <- raleigh_data_raw %>%
# group_by(speaker) %>%
count(n_tokens=speaker)
View(top_10_speakers)
top_10_speakers <- raleigh_data_raw %>%
count(n_tokens=speaker) %>%
mutate(rank=dense_rank(n_tokens))
View(top_10_speakers)
top_10_speakers <- raleigh_data_raw %>%
count(speaker)
View(top_10_speakers)
top_10_speakers <- raleigh_data_raw %>%
count(speaker) %>%
mutate(rank=dense_rank(n))
? dense_rank
top_10_speakers <- raleigh_data_raw %>%
count(speaker) %>%
mutate(rank=min_rank(n))
top_10_speakers <- raleigh_data_raw %>%
count(speaker) %>%
mutate(rank=dense_rank(desc(n)))
top_10_speakers <- raleigh_data_raw %>%
count(speaker) %>% # the number of tokens per speaker
mutate(rank=dense_rank(desc(n))) %>% # rank number of tokens with most=1
filter(rank >= 10)
top_10_speakers <- raleigh_data_raw %>%
count(speaker) %>% # the number of tokens per speaker
mutate(rank=dense_rank(desc(n))) %>% # rank number of tokens with most=1
filter(rank <= 10)
? as.vector
top_10_speakers <- raleigh_data_raw %>%
count(speaker) %>% # the number of tokens per speaker
mutate(rank=dense_rank(desc(n))) %>% # rank number of tokens with most=1
filter(rank <= 10) %>% # filter out everyone except the top 10 speakers
as.vector()
top_10_speakers <- raleigh_data_raw %>%
count(speaker) %>% # the number of tokens per speaker
mutate(rank=dense_rank(desc(n))) %>% # rank number of tokens with most=1
filter(rank <= 10) %>% # filter out everyone except the top 10 speakers
as.vector()['speaker']
top_10_speakers['speaker']
top_10_speakers <- raleigh_data_raw %>%
count(speaker) %>% # the number of tokens per speaker
mutate(rank=dense_rank(desc(n))) %>% # rank number of tokens with most=1
filter(rank <= 10) %>% # filter out everyone except the top 10 speakers
as.vector()[1]
top_10_speakers <- raleigh_data_raw %>%
count(speaker) %>% # the number of tokens per speaker
mutate(rank=dense_rank(desc(n))) %>% # rank number of tokens with most=1
filter(rank <= 10) %>% # filter out everyone except the top 10 speakers
as.vector()
top_10_speakers <- raleigh_data_raw %>%
count(speaker) %>% # the number of tokens per speaker
mutate(rank=dense_rank(desc(n))) %>% # rank number of tokens with most=1
filter(rank <= 10) %>% # filter out everyone except the top 10 speakers
as.vector()[[1]]
top_10_speakers <- raleigh_data_raw %>% # want a vector with top 10 speakers
count(speaker) %>% # the number of tokens per speaker
mutate(rank=dense_rank(desc(n))) %>% # rank number of tokens with most=1
filter(rank <= 10) %>% # filter out everyone except the top 10 speakers
dplyr::select(speaker) %>% # pick just the speaker column
as.vector() # convert dataframe to a list of vectors
View(top_10_speakers)
as.vector()
? as.vector
top_10_speakers <- raleigh_data_raw %>% # want a vector with top 10 speakers
count(speaker) %>% # the number of tokens per speaker
mutate(rank=dense_rank(desc(n))) %>% # rank number of tokens with most=1
filter(rank <= 10) %>% # filter out everyone except the top 10 speakers
dplyr::select(speaker) %>% # pick just the speaker column
vector() # convert dataframe to a list of vectors
top_10_speakers <- raleigh_data_raw %>% # want a vector with top 10 speakers
count(speaker) %>% # the number of tokens per speaker
mutate(rank=dense_rank(desc(n))) %>% # rank number of tokens with most=1
filter(rank <= 10) %>% # filter out everyone except the top 10 speakers
# dplyr::select(speaker) %>% # pick just the speaker column
vector() # convert dataframe to a list of vectors
top_10_speakers <- raleigh_data_raw %>% # want a vector with top 10 speakers
count(speaker) %>% # the number of tokens per speaker
mutate(rank=dense_rank(desc(n))) %>% # rank number of tokens with most=1
filter(rank <= 10) %>% # filter out everyone except the top 10 speakers
dplyr::select(speaker)
vector(top_10_speakers)
as.vector(top_10_speakers)
top_10_speakers %>% pull(speaker)
top_10_speakers <- raleigh_data_raw %>% # want a vector with top 10 speakers
count(speaker) %>% # the number of tokens per speaker
mutate(rank=dense_rank(desc(n))) %>% # rank number of tokens with most=1
filter(rank <= 10) %>% # filter out everyone except the top 10 speakers
pull(speaker) # convert speaker column to a vector
?max
